// Array.prototype.fill polyfill:
[].fill||(Array.prototype.fill=function(a){{for(var b=Object(this),c=parseInt(b.length,10),d=arguments[1],e=parseInt(d,10)||0,f=0>e?Math.max(c+e,0):Math.min(e,c),g=arguments[2],h=void 0===g?c:parseInt(g)||0,i=0>h?Math.max(c+h,0):Math.min(h,c);i>f;f++)b[f]=a;return b}});

var {class_name} = (function() {{
    var instance;

    function init() {{

        {activation_function}

        {output_function}

        {method}

    }};

    return {{
        getInstance: function() {{
            if (!instance) {{
                instance = init();
            }}
            return instance;
        }}
    }};

}})();

if (typeof process !== 'undefined' && typeof process.argv !== 'undefined') {{
    if (process.argv.length - 2 === {n_features}) {{
        const features = process.argv.slice(2);
        var brain = {class_name}.getInstance();
        var prediction = brain.{method_name}(features);
        console.log(prediction);
    }}
}}

// Web Worker:
// File: {file_name}
var onmessage = function(e) {{
    if (e.data.length === {n_features}) {{
        const features = e.data;
        var brain = {class_name}.getInstance();
        var prediction = brain.{method_name}(features);
        postMessage(prediction);
    }}
}};
// File: main.js
// if (typeof window !== 'undefined' && window.Worker) {{
//     var worker = new Worker('{file_name}');
//     worker.onmessage = function(e) {{
//         console.log('Prediction: ' + e.data);
//     }};
//     worker.postMessage([/* feature vector */]);
//     worker.postMessage([/* feature vector */]);
// }}
