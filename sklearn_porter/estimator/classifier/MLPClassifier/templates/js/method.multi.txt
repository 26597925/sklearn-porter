this.{method_name} = function(neurons) {{
    if (neurons.length != {n_features}) return -1;
    var network = [neurons].concat(layers);

    for (var i = 0; i < network.length - 1; i++) {{
        for (var j = 0; j < network[i + 1].length; j++) {{
            for (var l = 0; l < network[i].length; l++) {{
                network[i + 1][j] += network[i][l] * weights[i][l][j];
            }}
            network[i + 1][j] += bias[i][j];
        }}
        if ((i + 1) < (network.length - 1)) {{
            network[i + 1] = compAct(network[i + 1]);
        }}
    }}
    network[network.length - 1] = compOut(network[network.length - 1]);

    var classIdx = -1,
        classVal = Number.NEGATIVE_INFINITY;
    for (var i = 0, l = network[network.length - 1].length; i < l; i++) {{
        if (network[network.length - 1][i] > classVal) {{
            classVal = network[network.length - 1][i];
            classIdx = i;
        }}
    }}
    return classIdx;
}};