this.{method_name} = function(neurons) {{
    var network = [neurons].concat(this.layers);

    for (var i = 0; i < network.length - 1; i++) {{
        for (var j = 0; j < network[i + 1].length; j++) {{
            for (var l = 0; l < network[i].length; l++) {{
                network[i + 1][j] += network[i][l] * this.weights[i][l][j];
            }}
            network[i + 1][j] += this.bias[i][j];
        }}
        if ((i + 1) < (network.length - 1)) {{
            network[i + 1] = compute(this.hidden, network[i + 1]);
        }}
    }}
    network[network.length - 1] = compute(this.output, network[network.length - 1]);

    var idx = 0;
    for (var i = 0, l = network[network.length - 1].length; i < l; i++) {{
        idx = network[network.length - 1][i] > network[network.length - 1][idx] ? i : idx;
    }}
    return idx;
}};