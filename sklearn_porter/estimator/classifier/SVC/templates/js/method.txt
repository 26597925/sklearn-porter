this.{method_name} = function(features) {{

    kernels = double[vectors.length];
    kernelVal;
    switch (kernel[0]) {{
        case 'l':
            // <x,x'>
            for (i = 0; i < vectors.length; i++) {{
                kernelVal = 0.;
                for (j = 0; j < vectors[i].length; j++) {{
                    kernelVal += vectors[i][j] * features[j];
                }}
                kernelVals[i] = kernelVal;
            }}
            break;
        case 'p':
            // (y<x,x'>+r)^d
            for (i = 0; i < vectors.length; i++) {{
                kernelVal = 0.;
                for (j = 0; j < vectors[i].length; j++) {{
                    kernelVal += vectors[i][j] * features[j];
                }}
                kernelVals[i] = Math.pow((gamma * kernelVal) + coef0, degree);
            }}
            break;
        case 'r':
            // exp(-y|x-x'|^2)
            for (i = 0; i < vectors.length; i++) {{
                kernelVal = 0.;
                for (j = 0; j < vectors[i].length; j++) {{
                    kernelVal += Math.pow(vectors[i][j] - features[j], 2);
                }}
                kernelVals[i] = Math.exp(-gamma * kernelVal);
            }}
            break;
        case 's':
            // tanh(y<x,x'>+r)
            for (i = 0; i < vectors.length; i++) {{
                kernelVal = 0.;
                for (j = 0; j < vectors[i].length; j++) {{
                    kernelVal += vectors[i][j] * features[j];
                }}
                kernelVals[i] = Math.tanh((gamma * kernelVal) + coef0);
            }}
            break;
    }}

    starts = new Array(nClasses);
    for (i = 0; i < nClasses; i++) {{
        if (i != 0) {{
            start = 0;
            for (j = 0; j < i; j++) {{
                start += weights[j];
            }}
            starts[i] = start;
        }} else {{
            starts[0] = 0;
        }}
    }}

    ends = new Array(nClasses);
    for (i = 0; i < nClasses; i++) {{
        ends[i] = weights[i] + starts[i];
    }}

    if (nClasses == 2) {{

        for (i = 0; i < kernels.length; i++) {{
            kernels[i] = -kernels[i];
        }}

        decision = 0.;
        for (k = starts[1]; k < ends[1]; k++) {{
            decision += kernels[k] * coefficients[0][k];
        }}
        for (k = starts[0]; k < ends[0]; k++) {{
            decision += kernels[k] * coefficients[0][k];
        }}
        decision += intercepts[0];

        if (decision > 0) {{
            return 0;
        }}
        return 1;

    }} else {{

        decisions = new Array(nClasses);
        for (i = 0, d = 0, l = nClasses; i < l; i++) {{
            for (j = i + 1; j < l; j++) {{
                tmp = 0.;
                for (k = starts[j]; k < ends[j]; k++) {{
                    tmp += coefficients[i][k] * kernels[k];
                }}
                for (k = starts[i]; k < ends[i]; k++) {{
                    tmp += coefficients[j - 1][k] * kernels[k];
                }}
                decisions[d] = tmp + intercepts[d];
                d++;
            }}
        }}

        votes = new Array(intercepts.length);
        for (i = 0, d = 0, l = nClasses; i < l; i++) {{
            for (j = i + 1; j < l; j++) {{
                votes[d] = decisions[d] > 0 ? i : j;
                d++;
            }}
        }}

        amounts = new Array(nClasses).fill(0);
        for (i = 0, l = votes.length; i < l; i++) {{
            amounts[votes[i]] += 1;
        }}

        classVal = -1, classIdx = -1;
        for (i = 0, l = amounts.length; i < l; i++) {{
            if (amounts[i] > classVal) {{
                classVal = amounts[i];
                classIdx= i;
            }}
        }}
        return classes[classIdx];

    }}
}}